import asyncio
import requests
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ChatType
from config import Config, load_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

config: Config = load_config()
BOT_TOKEN: str = config.tg_bot.token

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

ADMIN_ID = 219614301  # Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
survey_id_counter = 1  # ID –∞–Ω–∫–µ—Ç—ã, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
user_answers = {}

# –í–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã
questions = [
    "–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è",
    "–í–∞—à –Ω–∏–∫ –≤ Telegram (—á–µ—Ä–µ–∑ @)",
    "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏",
    "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
    "–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)",
    "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–º –Ω—É–∂–Ω–æ?",
    "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ PDF, Excel-—Ñ–∞–π–ª)",
    "–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞",
    "–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞",
    "–£–∫–∞–∂–∏—Ç–µ, –Ω—É–∂–Ω—ã –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏).",
    "–ö–∞–∫–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –Ω—É–∂–Ω–∞? (–µ—Å—Ç—å –ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —É–ø–∞–∫–æ–≤–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã?)",
    "–ë—Ä–µ–Ω–¥–∏–Ω–≥ (–Ω—É–∂–Ω–æ –ª–∏ –±—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –¥–∞, —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –∏ —Ä–∞–∑–º–µ—Ä)",
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (10-13, 15-18, 25-30 –¥–Ω–µ–π, –ê–≤–∏–∞)",
    "–ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è?",
    "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å, —É–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å)"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
        [KeyboardButton(text="–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

consent_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="consent_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="consent_no")],
        [InlineKeyboardButton(text="–ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ñ–µ—Ä—Ç—É", callback_data="read_offer")]
    ]
)

delivery_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="10-13 –¥–Ω–µ–π", callback_data="10-13")],
        [InlineKeyboardButton(text="15-18 –¥–Ω–µ–π", callback_data="15-18")],
        [InlineKeyboardButton(text="25-30 –¥–Ω–µ–π", callback_data="25-30")],
        [InlineKeyboardButton(text="–ê–≤–∏–∞", callback_data="avia")]
    ]
)

# –ó–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
@dp.message(Command("start"))
async def start(message: types.Message):
    logger.debug("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer(
        "–ü–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∞–Ω–∫–µ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=consent_keyboard
    )

@dp.callback_query(lambda call: call.data == "consent_yes")
async def consent_yes(call: types.CallbackQuery):
    global survey_id_counter
    chat_id = call.message.chat.id
    user_answers[chat_id] = {"id": survey_id_counter, "answers": []}
    survey_id_counter += 1
    await call.message.answer(f"üìù –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ ID {user_answers[chat_id]['id']}.", reply_markup=start_keyboard)
    await call.message.answer(questions[0])
    await call.answer()

@dp.callback_query(lambda call: call.data == "consent_no")
async def consent_no(call: types.CallbackQuery):
    await call.message.answer(
        "–ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º. –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–∫–∞–∑.\n\n"
        "–í—ã –≥–æ—Ç–æ–≤—ã –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö?", reply_markup=consent_keyboard
    )
    await call.answer()

@dp.callback_query(lambda call: call.data == "read_offer")
async def read_offer(call: types.CallbackQuery):
    await call.message.answer_document(open("offer.pdf", "rb"), caption="–û—Ñ–µ—Ä—Ç–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    await call.answer()

@dp.message(lambda message: message.text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def show_faq(message: types.Message):
    await message.answer("üìå –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\nüëâ –î–æ—Å—Ç–∞–≤–∫–∞\nüëâ –û–±—Ä–µ—à–µ—Ç–∫–∞\nüëâ –û–ø–ª–∞—Ç–∞\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –æ—Ç–≤–µ—Ç–∏—Ç—å!")

@dp.message(lambda message: message.photo or message.document)
async def handle_file(message: types.Message):
    chat_id = message.chat.id
    if chat_id in user_answers and len(user_answers[chat_id]["answers"]) == 6:
        file_id = message.photo[-1].file_id if message.photo else message.document.file_id
        user_answers[chat_id]["answers"].append(file_id)
        await message.answer(f"‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. {questions[len(user_answers[chat_id]['answers'])]}")
    else:
        await message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø–æ—Å–ª–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")

@dp.message()
async def collect_answers(message: types.Message):
    chat_id = message.chat.id
    if chat_id in user_answers:
        user_answers[chat_id]["answers"].append(message.text)
        if len(user_answers[chat_id]["answers"]) < len(questions):
            if len(user_answers[chat_id]["answers"]) == 12:
                await message.answer("‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=delivery_keyboard)
            else:
                await message.answer(questions[len(user_answers[chat_id]["answers"])])
        else:
            answers_text = "\n".join([f"{questions[i]}: {answer}" for i, answer in enumerate(user_answers[chat_id]["answers"])])
            await bot.send_message(ADMIN_ID, f"üì© –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ ID {user_answers[chat_id]['id']}:\n\n{answers_text}")
            await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
            del user_answers[chat_id]

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
