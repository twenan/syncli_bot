import asyncio
import json
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaDocument
from aiogram.filters import Command
from aiogram.enums import ChatType
from config import Config, load_config
import aiohttp
from io import BytesIO
from openpyxl import load_workbook

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ config.py
config: Config = load_config()
BOT_TOKEN: str = config.tg_bot.token

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
# media_groups - —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# faq - —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
# YANDEX_DISK_TOKEN - —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É
# FILE_PATH - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É faq.xlsx –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
# MANAGER_CHAT_ID - ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É
media_groups = {}
faq = {}
YANDEX_DISK_TOKEN = "y0__xD-s5TpBxijkzYgie2UyhKmZIBRVpLHIieiT1CMAYGOMXpgHQ"  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–æ–∫–µ–Ω
FILE_PATH = "faq.xlsx"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
MANAGER_CHAT_ID = -4634857148

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ ID –∞–Ω–∫–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
def load_survey_id():
    """–ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –∞–Ω–∫–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ survey_id.txt. –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1."""
    try:
        with open("survey_id.txt", "r") as f:
            return int(f.read())
    except:
        return 1

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ ID –∞–Ω–∫–µ—Ç—ã –≤ —Ñ–∞–π–ª
def save_survey_id(counter):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π ID –∞–Ω–∫–µ—Ç—ã –≤ —Ñ–∞–π–ª survey_id.txt."""
    with open("survey_id.txt", "w") as f:
        f.write(str(counter))

survey_id_counter = load_survey_id()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_users():
    """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ users.json. –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å."""
    try:
        with open("users.json", "r") as f:
            return json.load(f)
    except:
        return {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_users(users):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ users.json —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã."""
    with open("users.json", "w") as f:
        json.dump(users, f, ensure_ascii=False, indent=4)

users = load_users()

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∞–Ω–∫–µ—Ç—ã
questions = [
    "–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è",
    "–í–∞—à –Ω–∏–∫ –≤ Telegram (—á–µ—Ä–µ–∑ @)",
    "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏",
    "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
    "–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)",
    "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–º –Ω—É–∂–Ω–æ?",
    "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ PDF, Excel-—Ñ–∞–π–ª). –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É, –∑–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
    "–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞",
    "–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞",
    "–£–∫–∞–∂–∏—Ç–µ, –Ω—É–∂–Ω—ã –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏).",
    "–ö–∞–∫–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –Ω—É–∂–Ω–∞? (–µ—Å—Ç—å –ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —É–ø–∞–∫–æ–≤–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã?)",
    "–ë—Ä–µ–Ω–¥–∏–Ω–≥ (–Ω—É–∂–Ω–æ –ª–∏ –±—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –¥–∞, —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –∏ —Ä–∞–∑–º–µ—Ä)",
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (10-13, 15-18, 25-30 –¥–Ω–µ–π, –ê–≤–∏–∞)",
    "–ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è?",
    "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å, —É–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å)"
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_answers = {}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ FAQ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
async def load_faq_from_yandex_disk():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª faq.xlsx —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –∏ –ø–∞—Ä—Å–∏—Ç –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å FAQ."""
    url = f"https://cloud-api.yandex.net/v1/disk/resources/download?path=/{FILE_PATH}"
    headers = {"Authorization": f"OAuth {YANDEX_DISK_TOKEN}"}
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    download_data = await response.json()
                    download_url = download_data["href"]
                    async with session.get(download_url) as file_response:
                        if file_response.status == 200:
                            xlsx_content = await file_response.read()
                            faq_dict = {}
                            workbook = load_workbook(filename=BytesIO(xlsx_content))
                            sheet = workbook.active
                            for row in sheet.iter_rows(min_row=2, values_only=True):
                                question, answer = row[0], row[1]
                                if question and answer:
                                    faq_dict[str(question).lower()] = str(answer)
                            logger.debug(f"FAQ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {faq_dict}")
                            return faq_dict
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {file_response.status}")
                            return {}
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {response.status} - {await response.text()}")
                    return {}
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ: {str(e)}")
        return {}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è FAQ
async def update_faq():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å faq –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    global faq
    faq = await load_faq_from_yandex_disk()
    if not faq:
        logger.warning("FAQ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É—é –∑–∞–≥–ª—É—à–∫—É")
        faq = {"–¥–æ—Å—Ç–∞–≤–∫–∞": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è FAQ
async def periodic_faq_update():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ FAQ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
    while True:
        await update_faq()
        logger.debug("FAQ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞")
        await asyncio.sleep(3600)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
        [KeyboardButton(text="–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
consent_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="consent_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="consent_no")],
        [InlineKeyboardButton(text="üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ñ–µ—Ä—Ç—É", callback_data="view_offer")]
    ]
)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —à–∞–Ω—Å–∞ —Å–æ–≥–ª–∞—Å–∏—è
consent_second_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="consent_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="final_no")]
    ]
)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
delivery_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="10-13 –¥–Ω–µ–π", callback_data="10-13")],
        [InlineKeyboardButton(text="15-18 –¥–Ω–µ–π", callback_data="15-18")],
        [InlineKeyboardButton(text="25-30 –¥–Ω–µ–π", callback_data="25-30")],
        [InlineKeyboardButton(text="–ê–≤–∏–∞", callback_data="avia")]
    ]
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    chat_id = message.chat.id
    if chat_id in user_answers:
        del user_answers[chat_id]
    for media_group_id, group_data in list(media_groups.items()):
        if group_data["chat_id"] == chat_id:
            del media_groups[media_group_id]
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–∫–∞–∑–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
@dp.message(lambda message: message.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def request_consent(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    await message.answer(
        "–ü–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∞–Ω–∫–µ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=consent_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è
@dp.callback_query(lambda call: call.data in ["consent_yes", "consent_no", "view_offer", "final_no"])
async def process_consent(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ–≥–ª–∞—Å–∏—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö."""
    chat_id = call.message.chat.id
    if call.data == "consent_yes":
        global survey_id_counter
        user_answers[chat_id] = {"id": survey_id_counter, "answers": [], "source_chat": call.message.chat.id}
        survey_id_counter += 1
        save_survey_id(survey_id_counter)
        if str(chat_id) in users:
            user_answers[chat_id]["answers"] = [
                users[str(chat_id)]["name"],
                users[str(chat_id)]["telegram"],
                users[str(chat_id)]["phone"]
            ]
            await call.message.edit_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! üìù –í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞—á–Ω–µ–º —Å —Ç–æ–≤–∞—Ä–∞.\n\n{questions[3]}")
        else:
            await call.message.edit_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! üìù –ù–∞—á–Ω–µ–º.\n\n{questions[0]}")
    elif call.data == "view_offer":
        try:
            await bot.send_document(chat_id, document=types.FSInputFile("/home/anna/syncli_bot/offer.pdf"), caption="üìÑ –û—Ñ–µ—Ä—Ç–∞")
            await call.message.edit_text("–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=consent_keyboard)
        except Exception as e:
            await call.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ñ–µ—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=consent_keyboard)
    elif call.data == "consent_no":
        await call.message.edit_text(
            "–ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º. –û–Ω–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑–∞. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=consent_second_keyboard
        )
    elif call.data == "final_no":
        await call.message.edit_text("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é: @YourManagerTelegram", reply_markup=None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã)
@dp.message(lambda message: message.photo or message.document)
async def handle_file(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ —ç—Ç–∞–ø–µ –∞–Ω–∫–µ—Ç—ã."""
    chat_id = message.chat.id
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. Chat ID: {chat_id}, Media Group ID: {message.media_group_id}, Photo: {bool(message.photo)}, Document: {bool(message.document)}")
    if chat_id in user_answers and len(user_answers[chat_id]["answers"]) == 6:
        if not any(isinstance(answer, list) for answer in user_answers[chat_id]["answers"]):
            user_answers[chat_id]["answers"].append([])
            logger.debug(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Chat ID: {chat_id}")
        files_list = user_answers[chat_id]["answers"][6]
        if message.media_group_id:
            if message.media_group_id not in media_groups:
                media_groups[message.media_group_id] = {"chat_id": chat_id, "files": [], "processed": False}
            file_data = None
            if message.photo:
                photo = message.photo[-1]
                file_data = {"file_id": photo.file_id, "type": "photo"}
            elif message.document:
                file_data = {"file_id": message.document.file_id, "type": "document"}
            if file_data and file_data["file_id"] not in [f["file_id"] for f in media_groups[message.media_group_id]["files"]]:
                media_groups[message.media_group_id]["files"].append(file_data)
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É {message.media_group_id}: {file_data['file_id']}")
            if not media_groups[message.media_group_id]["processed"]:
                media_groups[message.media_group_id]["processed"] = True
                await message.answer("‚úÖ –§–∞–π–ª(—ã) –ø–æ–ª—É—á–µ–Ω—ã. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            return
        else:
            if message.photo:
                photo = message.photo[-1]
                files_list.append({"file_id": photo.file_id, "type": "photo"})
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ: {photo.file_id}")
            elif message.document:
                files_list.append({"file_id": message.document.file_id, "type": "document"})
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –æ–¥–∏–Ω–æ—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {message.document.file_id}")
            await message.answer("‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            logger.debug(f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Chat ID {chat_id}: {files_list}")
        return
    await message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∞–Ω–∫–µ—Ç–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
@dp.message(lambda message: message.text and message.text.lower() == "–≥–æ—Ç–æ–≤–æ")
async def handle_ready(message: types.Message):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —ç—Ç–∞–ø –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É."""
    chat_id = message.chat.id
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ '–ì–æ—Ç–æ–≤–æ'. Chat ID: {chat_id}, user_answers: {user_answers.get(chat_id)}")
    if chat_id in user_answers:
        if len(user_answers[chat_id]["answers"]) >= 6 and isinstance(user_answers[chat_id]["answers"][6], list):
            files_list = user_answers[chat_id]["answers"][6]
            for media_group_id, group_data in list(media_groups.items()):
                if group_data["chat_id"] == chat_id:
                    files_list.extend([f for f in group_data["files"] if f["file_id"] not in [x["file_id"] for x in files_list]])
                    del media_groups[media_group_id]
                    logger.debug(f"–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã —Ñ–∞–π–ª—ã –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {media_group_id} –≤ —Å–ø–∏—Å–æ–∫ Chat ID {chat_id}: {files_list}")
            if len(user_answers[chat_id]["answers"]) == 7:
                await message.answer(questions[7])
            else:
                user_answers[chat_id]["answers"].append("–ì–æ—Ç–æ–≤–æ")
                await message.answer("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.")
                await message.answer(questions[7])
            logger.debug(f"–ü–æ—Å–ª–µ '–ì–æ—Ç–æ–≤–æ' user_answers –¥–ª—è Chat ID {chat_id}: {user_answers[chat_id]}")
            return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
@dp.message(lambda message: message.text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def show_faq(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è faq."""
    chat_id = message.chat.id
    if chat_id in user_answers:
        del user_answers[chat_id]
    response = "üìå –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n" + "\n".join(f"üëâ {k.capitalize()}" for k in faq) + "\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!"
    await message.answer(response)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—É
async def finish_survey(chat_id, message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∫–µ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä—É."""
    if str(chat_id) not in users and len(user_answers[chat_id]["answers"]) >= 3:
        users[str(chat_id)] = {
            "name": user_answers[chat_id]["answers"][0],
            "telegram": user_answers[chat_id]["answers"][1],
            "phone": user_answers[chat_id]["answers"][2]
        }
        save_users(users)
    answers_text = "\n".join(f"{questions[i]}: {answer}" for i, answer in enumerate(user_answers[chat_id]["answers"]) if not isinstance(answer, list))
    try:
        files = user_answers[chat_id]["answers"][6] if len(user_answers[chat_id]["answers"]) > 6 and isinstance(user_answers[chat_id]["answers"][6], list) else []
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è Chat ID {chat_id}: {files}")
        if files:
            media_group = []
            unique_file_ids = set()
            for file in files:
                file_id = file["file_id"]
                if file_id not in unique_file_ids:
                    if file["type"] == "photo":
                        media_group.append(InputMediaPhoto(media=file_id))
                    elif file["type"] == "document":
                        media_group.append(InputMediaDocument(media=file_id))
                    unique_file_ids.add(file_id)
            if media_group:
                media_group[0].caption = f"üì© –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ ID {user_answers[chat_id]['id']}:\n\n{answers_text}"
                await bot.send_media_group(MANAGER_CHAT_ID, media=media_group)
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ —Å {len(media_group)} —Ñ–∞–π–ª–∞–º–∏")
        else:
            await bot.send_message(MANAGER_CHAT_ID, f"üì© –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ ID {user_answers[chat_id]['id']}:\n\n{answers_text}")
        await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @YourManagerTelegram")
    for media_group_id, group_data in list(media_groups.items()):
        if group_data["chat_id"] == chat_id:
            del media_groups[media_group_id]
    del user_answers[chat_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∫–µ—Ç—ã –∏ FAQ
@dp.message(lambda message: message.text)
async def collect_answers_or_faq(message: types.Message):
    """–°–æ–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ FAQ."""
    chat_id = message.chat.id
    text = message.text.lower()
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        for keyword, response in faq.items():
            if any(word in text for word in keyword.lower().split()):
                await message.reply(response)
                return
        return
    for keyword, response in faq.items():
        if any(word in text for word in keyword.lower().split()):
            await message.answer(response)
            return
    if chat_id in user_answers:
        if text == "–Ω–∞–∑–∞–¥" and user_answers[chat_id]["answers"]:
            user_answers[chat_id]["answers"].pop()
            await message.answer(f"üîÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç:\n\n{questions[len(user_answers[chat_id]['answers'])]}")
            return
        if text == "–≥–æ—Ç–æ–≤–æ":
            await handle_ready(message)
            return
        user_answers[chat_id]["answers"].append(message.text)
        next_index = len(user_answers[chat_id]["answers"])
        if next_index < len(questions):
            if next_index == 12:
                await message.answer("‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=delivery_keyboard)
            else:
                await message.answer(questions[next_index])
        else:
            await finish_survey(chat_id, message)
    else:
        if message.chat.type == ChatType.PRIVATE:
            await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –Ω–æ –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.callback_query(lambda call: call.data in ["10-13", "15-18", "25-30", "avia"])
async def delivery_selected(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    chat_id = call.message.chat.id
    if chat_id in user_answers:
        user_answers[chat_id]["answers"].append(call.data)
        next_index = len(user_answers[chat_id]["answers"])
        if next_index < len(questions):
            await call.message.answer(f"‚úÖ –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—ã–±—Ä–∞–Ω.\n\n{questions[next_index]}")
        else:
            await finish_survey(chat_id, call.message)
    await call.answer()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞: –∑–∞–≥—Ä—É–∂–∞–µ—Ç FAQ, –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await update_faq()  # –ó–∞–≥—Ä—É–∂–∞–µ–º FAQ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        asyncio.create_task(periodic_faq_update())  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")

if __name__ == '__main__':
    asyncio.run(main())